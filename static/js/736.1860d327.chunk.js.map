{"version":3,"file":"static/js/736.1860d327.chunk.js","mappings":"+RAEaA,EAAUC,EAAAA,GAAAA,IAAH,4IAQPC,EAAaD,EAAAA,GAAAA,GAAH,8GAQVE,EAAWF,EAAAA,GAAAA,GAAH,uLAWRG,EAAeH,EAAAA,GAAAA,GAAH,+VAqBZI,EAAWJ,EAAAA,GAAAA,IAAH,iJASRK,EAAWL,EAAAA,GAAAA,GAAH,kDAIRM,EAAaN,EAAAA,GAAAA,EAAH,qLASVO,EAAUP,EAAAA,GAAAA,IAAH,sO,SCLpB,EArDa,WACX,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeP,GAFxB,gBAENG,EAFM,EAENA,KACRC,EAAQD,GAHM,gDAKdK,QAAQC,IAAR,MALc,yDAAH,qDASfH,GACD,GAAE,CAACN,KAGF,UAACT,EAAD,YACE,SAACE,EAAD,mBAECU,EAAKO,QACJ,SAAChB,EAAD,UACGS,EAAKQ,KAAI,SAAAC,GAAK,OACb,UAACjB,EAAD,CAAckB,UAAU,YAAxB,UACGD,EAAME,cACL,SAACf,EAAD,CACEgB,IAAG,yCAAoCH,EAAME,cAC7CE,IAAG,UAAKJ,EAAMK,KAAX,eAGL,SAAClB,EAAD,CACEgB,IAAG,oDACHC,IAAG,UAAKJ,EAAMK,KAAX,eAIP,UAACrB,EAAD,YACE,SAACC,EAAD,UAAWe,EAAMK,QACjB,uCAAeL,EAAMM,kBAfgBN,EAAMO,GADlC,OAsBjB,SAACrB,EAAD,kEAMP,C,kMC/DDsB,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAQ,mCACRC,eAAe,GAIV,IAAMC,EAAgB,mCAAG,6GAAOC,EAAP,+BAAc,EAAGC,EAAjB,yCAELL,EAAAA,EAAAA,IAAU,sBAAuB,CACtDM,OAAQ,CACNF,KAAAA,EACAG,SAAUF,KALc,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAQrBA,GARqB,wCAUtB,IAAIC,MAAM,4BAVY,0DAAH,qDAgBhBC,EAAgB,mCAAG,WAAOC,GAAP,2FAEtBC,EAAWD,EAAK,kHACyFA,EADzF,qDAFM,SAKLX,EAAAA,EAAAA,IAAUY,GALL,uBAKpBJ,EALoB,EAKpBA,KALoB,kBAMrBA,GANqB,sCAQtB,IAAIC,MAAM,2BARY,yDAAH,sDAYhBI,EAAc,mCAAG,WAAOjC,EAASyB,GAAhB,kGAEHL,EAAAA,EAAAA,IAAA,gBAAmBpB,GAAW,CACnD0B,OAAQ,CACNP,GAAInB,EACJ2B,SAAUF,KALY,uBAElBG,EAFkB,EAElBA,KAFkB,kBAQnBA,GARmB,sCAUpB,IAAIC,MAAM,0CAVU,yDAAH,wDAcdtB,EAAc,mCAAG,WAAOP,GAAP,kGAEHoB,EAAAA,EAAAA,IAAA,gBAAmBpB,EAAnB,aAFG,uBAElB4B,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,sCAKpB,IAAIC,MAAM,gCALU,yDAAH,sDAUdK,EAAiB,mCAAG,WAAOlC,GAAP,kGAENoB,EAAAA,EAAAA,IAAA,gBAAmBpB,EAAnB,aAFM,uBAErB4B,EAFqB,EAErBA,KAFqB,kBAGtBA,GAHsB,sCAKvB,IAAIC,MAAM,mCALa,yDAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 30px;\n  padding-right: 20px;\n  padding-left: 20px;\n  padding-bottom: 20px;\n  text-align: center;\n`;\n\nexport const CastHeader = styled.h3`\n  font-size: 30px;\n  font-weight: 700;\n\n  color: #040404;\n  margin-bottom: 20px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px;\n  list-style: none;\n  padding: 0;\n  margin: 0 auto;\n  margin-bottom: 30px;\n`;\n\nexport const CastListItem = styled.li`\n\n\n  backdrop-filter: blur(10px);\n  padding: 10px;\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 250px;\n  padding: 18px;\n  border-radius: 4px;\n\n  &:hover,\n  &:focus {\n    box-shadow: rgba(0, 0, 0, 0.3) 0px 8px 32px 0px;\n  }\n`;\n\nexport const CastInfo = styled.div`\n  font-size: 16px;\n  font-weight: 400;\n  margin-top: 20px;\n  max-width: 220px;\n  color: #000000;\n  margin: 0 auto;\n`;\n\nexport const CastName = styled.h3`\n    margin-bottom: 20px;\n`;\n\nexport const NoCastText = styled.p`\n  margin: 30px auto 0 auto;\n  text-align: center;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  max-width: 500px;\n`;\n\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n  background-repeat: no-repeat;\n  background-size: cover;\n\n  display: block;\n  width: 100%;\n  /* height: 350px; */\n  object-fit: cover;\n  object-position: center;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../../services/api';\nimport {\n  CastHeader,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  CastImg,\n  NoCastText,\n  Wrapper,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <CastHeader>Cast</CastHeader>\n\n      {cast.length ? (\n        <CastList>\n          {cast.map(actor => (\n            <CastListItem className=\"cast-card\" key={actor.id}>\n              {actor.profile_path ? (\n                <CastImg\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={`${actor.name} profile`}\n                />\n              ) : (\n                <CastImg\n                  src={`https://via.placeholder.com/200x300?text=No+Image`}\n                  alt={`${actor.name} profile`}\n                />\n              )}\n\n              <CastInfo>\n                <CastName>{actor.name}</CastName>\n                <p>Character: {actor.character}</p>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoCastText>\n          We don't have any information about the cast yet.\n        </NoCastText>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `7d4ac179e844e8d16c4af681deb5028c`,\n  include_adult: false,\n\n};\n\nexport const fetchTrendMovies = async (page = 1, lng) => {\n  try {\n    const { data } = await axios.get('/trending/movie/day', {\n      params: {\n        page,\n        language: lng,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movies');\n  }\n};\n\n\n\nexport const fetchMovieByName = async (query) => {\n  try {\n    const urlParam = query\n      ? `https://api.themoviedb.org/3/search/movie?api_key=7d4ac179e844e8d16c4af681deb5028c&language=en-US&query=${query}&page=1&include_adult=false`\n      : `/trending/movie/day`;\n    const { data } = await axios.get(urlParam);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movie');\n  }\n};\n\nexport const fetchMovieById = async (movieId, lng) => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        id: movieId,\n        language: lng,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no movie with that name');\n  }\n};\n\nexport const fetchMovieCast = async (movieId) => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, there is no cast movie');\n  }\n};\n\n\nexport const fetchMovieReviews = async (movieId) => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`);\n    return data;\n  } catch (error) {\n    throw new Error('Oops, we don`t have any reviews');\n  }\n};\n\n"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","NoCastText","CastImg","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","fetchMovieCast","console","log","length","map","actor","className","profile_path","src","alt","name","character","id","axios","api_key","include_adult","fetchTrendMovies","page","lng","params","language","data","Error","fetchMovieByName","query","urlParam","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}